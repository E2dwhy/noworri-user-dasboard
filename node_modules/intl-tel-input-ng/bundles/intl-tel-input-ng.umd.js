(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('intl-tel-input'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('intl-tel-input-ng', ['exports', '@angular/core', '@angular/forms', 'intl-tel-input', '@angular/common'], factory) :
    (global = global || self, factory(global['intl-tel-input-ng'] = {}, global.ng.core, global.ng.forms, global.intlTelInput, global.ng.common));
}(this, (function (exports, core, forms, intlTelInput, common) { 'use strict';

    /*
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */
    var IntlTelInputComponent = /** @class */ (function () {
        function IntlTelInputComponent() {
            this.name = 'intl-tel-input-name';
            this.options = {};
            this.E164PhoneNumberChange = new core.EventEmitter();
        }
        IntlTelInputComponent.modifyCountryData = function () {
            window.intlTelInputGlobals.getCountryData().forEach(function (country) { return country.name = country.name.replace(/.+\((.+)\)/, '$1'); });
        };
        IntlTelInputComponent.prototype.ngAfterViewInit = function () {
            if (this.onlyLocalized) {
                IntlTelInputComponent.modifyCountryData();
            }
            var intlTelInputInstance = intlTelInput;
            this._intlTelInput = intlTelInputInstance(this._inputElement.nativeElement, this.options);
        };
        Object.defineProperty(IntlTelInputComponent.prototype, "intlTelInput", {
            get: function () {
                return this._intlTelInput;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(IntlTelInputComponent.prototype, "phoneNumber", {
            get: function () {
                return this._phoneNumber;
            },
            set: function (value) {
                if (!!value) {
                    this._intlTelInput.setNumber(value);
                }
                this._phoneNumber = value;
                this.i18nizePhoneNumber();
            },
            enumerable: false,
            configurable: true
        });
        IntlTelInputComponent.prototype.i18nizePhoneNumber = function () {
            this.E164PhoneNumber = null;
            if (this._intlTelInput.isValidNumber()) {
                this.E164PhoneNumber = this._intlTelInput.getNumber();
            }
            this.E164PhoneNumberChange.emit(this.E164PhoneNumber);
        };
        return IntlTelInputComponent;
    }());
    IntlTelInputComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'intl-tel-input',
                    template: "<label [attr.for]=\"name\" [ngClass]=\"labelCssClass\" *ngIf=\"label && name\" >{{label}}</label>\n<input\n    type=\"text\"\n    [ngClass]=\"cssClass\"\n    [attr.id]=\"name\"\n    [attr.name]=\"name\"\n    [name]=\"name\"\n    [attr.aria-required]=\"required || null\"\n    [required]=\"required\"\n    [(ngModel)]=\"phoneNumber\"\n    (countrychange)=\"i18nizePhoneNumber()\"\n    #intlTelInput>\n\n",
                    viewProviders: [{ provide: forms.ControlContainer, useExisting: forms.NgForm }],
                    styles: [""]
                },] }
    ];
    IntlTelInputComponent.propDecorators = {
        cssClass: [{ type: core.Input }],
        E164PhoneNumber: [{ type: core.Input }],
        label: [{ type: core.Input }],
        labelCssClass: [{ type: core.Input }],
        name: [{ type: core.Input }],
        onlyLocalized: [{ type: core.Input }],
        options: [{ type: core.Input }],
        required: [{ type: core.Input }],
        E164PhoneNumberChange: [{ type: core.Output }],
        _inputElement: [{ type: core.ViewChild, args: ['intlTelInput',] }]
    };

    /*
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
     * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
     * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
     * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */
    var IntlTelInputNgModule = /** @class */ (function () {
        function IntlTelInputNgModule() {
        }
        IntlTelInputNgModule.forRoot = function () {
            return {
                ngModule: IntlTelInputNgModule,
                providers: []
            };
        };
        return IntlTelInputNgModule;
    }());
    IntlTelInputNgModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        IntlTelInputComponent,
                    ],
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                    ],
                    exports: [
                        IntlTelInputComponent,
                    ]
                },] }
    ];

    /*
     * Public API Surface of intl-tel-input-ng
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.IntlTelInputComponent = IntlTelInputComponent;
    exports.IntlTelInputNgModule = IntlTelInputNgModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=intl-tel-input-ng.umd.js.map
