{"version":3,"sources":["../../src/lib/components/intl-tel-input.component.ts","../../src/lib/intl-tel-input-ng.module.ts"],"names":["IntlTelInputComponent","this","name","options","E164PhoneNumberChange","EventEmitter","modifyCountryData","window","intlTelInputGlobals","getCountryData","forEach","country","replace","prototype","ngAfterViewInit","onlyLocalized","intlTelInputInstance","intlTelInput","_intlTelInput","_inputElement","nativeElement","Object","defineProperty","_phoneNumber","value","setNumber","i18nizePhoneNumber","E164PhoneNumber","isValidNumber","getNumber","emit","Component","args","selector","template","viewProviders","provide","ControlContainer","useExisting","NgForm","Input","Output","ViewChild","IntlTelInputNgModule","forRoot","ngModule","providers","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"2dAcA,SAAAA,IAYoBC,KAAAC,KAAO,sBAEPD,KAAAE,QAA+B,GAE7BF,KAAAG,sBAAwB,IAAIC,EAAAA,oBAK/BL,EAAAM,kBAAP,WACHC,OAAeC,oBAAoBC,iBAAiBC,SAAQ,SAACC,GAC1D,OAAAA,EAAQT,KAAOS,EAAQT,KAAKU,QAAQ,aAAc,UAGnDZ,EAAAa,UAAAC,gBAAA,WACCb,KAAKc,eACLf,EAAsBM,oBAG1B,IAAMU,EAAuBC,EAC7BhB,KAAKiB,cAAgBF,EAAqBf,KAAKkB,cAAcC,cAAenB,KAAKE,UAGrFkB,OAAAC,eAAItB,EAAAa,UAAA,eAAY,KAAhB,WACI,OAAOZ,KAAKiB,+CAGhBG,OAAAC,eAAItB,EAAAa,UAAA,cAAW,KAAf,WACI,OAAOZ,KAAKsB,kBAGhB,SAAgBC,GACNA,GACFvB,KAAKiB,cAAcO,UAAUD,GAEjCvB,KAAKsB,aAAeC,EACpBvB,KAAKyB,sDAGF1B,EAAAa,UAAAa,mBAAA,WACHzB,KAAK0B,gBAAkB,KACnB1B,KAAKiB,cAAcU,kBACnB3B,KAAK0B,gBAAkB1B,KAAKiB,cAAcW,aAE9C5B,KAAKG,sBAAsB0B,KAAK7B,KAAK0B,2CAxD5CI,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,iBACVC,SAAA,6XAEAC,cAAe,CAAC,CAAEC,QAASC,EAAAA,iBAAkBC,YAAaC,EAAAA,2DAIzDC,EAAAA,+BACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,oBACAA,EAAAA,6BACAA,EAAAA,uBACAA,EAAAA,wBACAA,EAAAA,qCACAC,EAAAA,8BACAC,EAAAA,UAASV,KAAA,CAAC,oCCLf,SAAAW,YACkBA,EAAAC,QAAP,WACH,MAAO,CACHC,SAAUF,EACVG,UAAW,8BAhBtBC,EAAAA,SAAQf,KAAA,CAAC,CACNgB,aAAc,CACVhD,GAEJiD,QAAS,CACLC,EAAAA,aACAC,EAAAA,aAEJC,QAAS,CACLpD","sourcesContent":["/*\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { AfterViewInit, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport * as intlTelInput from 'intl-tel-input';\nimport { CountryData, IntlTelInputOptions } from '../model/intl-tel-input-options';\n\n@Component({\n    selector: 'intl-tel-input',\n    templateUrl: './intl-tel-input.component.html',\n    styleUrls: ['./intl-tel-input.component.scss'],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n})\nexport class IntlTelInputComponent implements AfterViewInit {\n\n    @Input() public cssClass!: string;\n    @Input() public E164PhoneNumber!: string | null;\n    @Input() public label!: string;\n    @Input() public labelCssClass!: string;\n    @Input() public name = 'intl-tel-input-name';\n    @Input() public onlyLocalized!: boolean;\n    @Input() public options: IntlTelInputOptions = {};\n    @Input() public required!: boolean;\n    @Output() private E164PhoneNumberChange = new EventEmitter<string | null>();\n    @ViewChild('intlTelInput') private _inputElement!: ElementRef;\n    private _phoneNumber!: string;\n    private _intlTelInput: any;\n\n    private static modifyCountryData(): void {\n        (window as any).intlTelInputGlobals.getCountryData().forEach((country: CountryData) =>\n            country.name = country.name.replace(/.+\\((.+)\\)/, '$1'));\n    }\n\n    public ngAfterViewInit(): void {\n        if (this.onlyLocalized) {\n            IntlTelInputComponent.modifyCountryData();\n        }\n\n        const intlTelInputInstance = intlTelInput;\n        this._intlTelInput = intlTelInputInstance(this._inputElement.nativeElement, this.options);\n    }\n\n    get intlTelInput(): any {\n        return this._intlTelInput;\n    }\n\n    get phoneNumber(): string {\n        return this._phoneNumber;\n    }\n\n    set phoneNumber(value: string) {\n        if (!!value) {\n            this._intlTelInput.setNumber(value);\n        }\n        this._phoneNumber = value;\n        this.i18nizePhoneNumber();\n    }\n\n    public i18nizePhoneNumber(): void {\n        this.E164PhoneNumber = null;\n        if (this._intlTelInput.isValidNumber()) {\n            this.E164PhoneNumber = this._intlTelInput.getNumber();\n        }\n        this.E164PhoneNumberChange.emit(this.E164PhoneNumber);\n    }\n}\n","/*\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IntlTelInputComponent } from './components/intl-tel-input.component';\n\n@NgModule({\n    declarations: [\n        IntlTelInputComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n    ],\n    exports: [\n        IntlTelInputComponent,\n    ]\n})\nexport class IntlTelInputNgModule {\n    public static forRoot(): ModuleWithProviders<IntlTelInputNgModule> {\n        return {\n            ngModule: IntlTelInputNgModule,\n            providers: []\n        };\n    }\n}\n"]}