/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ControlContainer, NgForm } from '@angular/forms';
import * as intlTelInput from 'intl-tel-input';
export class IntlTelInputComponent {
    constructor() {
        this.name = 'intl-tel-input-name';
        this.options = {};
        this.E164PhoneNumberChange = new EventEmitter();
    }
    static modifyCountryData() {
        window.intlTelInputGlobals.getCountryData().forEach((country) => country.name = country.name.replace(/.+\((.+)\)/, '$1'));
    }
    ngAfterViewInit() {
        if (this.onlyLocalized) {
            IntlTelInputComponent.modifyCountryData();
        }
        const intlTelInputInstance = intlTelInput;
        this._intlTelInput = intlTelInputInstance(this._inputElement.nativeElement, this.options);
    }
    get intlTelInput() {
        return this._intlTelInput;
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    set phoneNumber(value) {
        if (!!value) {
            this._intlTelInput.setNumber(value);
        }
        this._phoneNumber = value;
        this.i18nizePhoneNumber();
    }
    i18nizePhoneNumber() {
        this.E164PhoneNumber = null;
        if (this._intlTelInput.isValidNumber()) {
            this.E164PhoneNumber = this._intlTelInput.getNumber();
        }
        this.E164PhoneNumberChange.emit(this.E164PhoneNumber);
    }
}
IntlTelInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'intl-tel-input',
                template: "<label [attr.for]=\"name\" [ngClass]=\"labelCssClass\" *ngIf=\"label && name\" >{{label}}</label>\n<input\n    type=\"text\"\n    [ngClass]=\"cssClass\"\n    [attr.id]=\"name\"\n    [attr.name]=\"name\"\n    [name]=\"name\"\n    [attr.aria-required]=\"required || null\"\n    [required]=\"required\"\n    [(ngModel)]=\"phoneNumber\"\n    (countrychange)=\"i18nizePhoneNumber()\"\n    #intlTelInput>\n\n",
                viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],
                styles: [""]
            },] }
];
IntlTelInputComponent.propDecorators = {
    cssClass: [{ type: Input }],
    E164PhoneNumber: [{ type: Input }],
    label: [{ type: Input }],
    labelCssClass: [{ type: Input }],
    name: [{ type: Input }],
    onlyLocalized: [{ type: Input }],
    options: [{ type: Input }],
    required: [{ type: Input }],
    E164PhoneNumberChange: [{ type: Output }],
    _inputElement: [{ type: ViewChild, args: ['intlTelInput',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50bC10ZWwtaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jb21wb25lbnRzL2ludGwtdGVsLWlucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztHQU9HO0FBRUgsT0FBTyxFQUFpQixTQUFTLEVBQWMsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRCxPQUFPLEtBQUssWUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBUy9DLE1BQU0sT0FBTyxxQkFBcUI7SUFObEM7UUFZb0IsU0FBSSxHQUFHLHFCQUFxQixDQUFDO1FBRTdCLFlBQU8sR0FBd0IsRUFBRSxDQUFDO1FBRWhDLDBCQUFxQixHQUFHLElBQUksWUFBWSxFQUFpQixDQUFDO0lBMENoRixDQUFDO0lBckNXLE1BQU0sQ0FBQyxpQkFBaUI7UUFDM0IsTUFBYyxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQW9CLEVBQUUsRUFBRSxDQUNsRixPQUFPLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixxQkFBcUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzdDO1FBRUQsTUFBTSxvQkFBb0IsR0FBRyxZQUFZLENBQUM7UUFDMUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLFdBQVcsQ0FBQyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVNLGtCQUFrQjtRQUNyQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ3pEO1FBQ0QsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7O1lBekRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQiw4WkFBOEM7Z0JBRTlDLGFBQWEsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsQ0FBQzs7YUFDdEU7Ozt1QkFHSSxLQUFLOzhCQUNMLEtBQUs7b0JBQ0wsS0FBSzs0QkFDTCxLQUFLO21CQUNMLEtBQUs7NEJBQ0wsS0FBSztzQkFDTCxLQUFLO3VCQUNMLEtBQUs7b0NBQ0wsTUFBTTs0QkFDTixTQUFTLFNBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xDb250YWluZXIsIE5nRm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCAqIGFzIGludGxUZWxJbnB1dCBmcm9tICdpbnRsLXRlbC1pbnB1dCc7XG5pbXBvcnQgeyBDb3VudHJ5RGF0YSwgSW50bFRlbElucHV0T3B0aW9ucyB9IGZyb20gJy4uL21vZGVsL2ludGwtdGVsLWlucHV0LW9wdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2ludGwtdGVsLWlucHV0JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vaW50bC10ZWwtaW5wdXQuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2ludGwtdGVsLWlucHV0LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdmlld1Byb3ZpZGVyczogW3sgcHJvdmlkZTogQ29udHJvbENvbnRhaW5lciwgdXNlRXhpc3Rpbmc6IE5nRm9ybSB9XVxufSlcbmV4cG9ydCBjbGFzcyBJbnRsVGVsSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICAgIEBJbnB1dCgpIHB1YmxpYyBjc3NDbGFzcyE6IHN0cmluZztcbiAgICBASW5wdXQoKSBwdWJsaWMgRTE2NFBob25lTnVtYmVyITogc3RyaW5nIHwgbnVsbDtcbiAgICBASW5wdXQoKSBwdWJsaWMgbGFiZWwhOiBzdHJpbmc7XG4gICAgQElucHV0KCkgcHVibGljIGxhYmVsQ3NzQ2xhc3MhOiBzdHJpbmc7XG4gICAgQElucHV0KCkgcHVibGljIG5hbWUgPSAnaW50bC10ZWwtaW5wdXQtbmFtZSc7XG4gICAgQElucHV0KCkgcHVibGljIG9ubHlMb2NhbGl6ZWQhOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHB1YmxpYyBvcHRpb25zOiBJbnRsVGVsSW5wdXRPcHRpb25zID0ge307XG4gICAgQElucHV0KCkgcHVibGljIHJlcXVpcmVkITogYm9vbGVhbjtcbiAgICBAT3V0cHV0KCkgcHJpdmF0ZSBFMTY0UGhvbmVOdW1iZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IG51bGw+KCk7XG4gICAgQFZpZXdDaGlsZCgnaW50bFRlbElucHV0JykgcHJpdmF0ZSBfaW5wdXRFbGVtZW50ITogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9waG9uZU51bWJlciE6IHN0cmluZztcbiAgICBwcml2YXRlIF9pbnRsVGVsSW5wdXQ6IGFueTtcblxuICAgIHByaXZhdGUgc3RhdGljIG1vZGlmeUNvdW50cnlEYXRhKCk6IHZvaWQge1xuICAgICAgICAod2luZG93IGFzIGFueSkuaW50bFRlbElucHV0R2xvYmFscy5nZXRDb3VudHJ5RGF0YSgpLmZvckVhY2goKGNvdW50cnk6IENvdW50cnlEYXRhKSA9PlxuICAgICAgICAgICAgY291bnRyeS5uYW1lID0gY291bnRyeS5uYW1lLnJlcGxhY2UoLy4rXFwoKC4rKVxcKS8sICckMScpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5vbmx5TG9jYWxpemVkKSB7XG4gICAgICAgICAgICBJbnRsVGVsSW5wdXRDb21wb25lbnQubW9kaWZ5Q291bnRyeURhdGEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGludGxUZWxJbnB1dEluc3RhbmNlID0gaW50bFRlbElucHV0O1xuICAgICAgICB0aGlzLl9pbnRsVGVsSW5wdXQgPSBpbnRsVGVsSW5wdXRJbnN0YW5jZSh0aGlzLl9pbnB1dEVsZW1lbnQubmF0aXZlRWxlbWVudCwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG5cbiAgICBnZXQgaW50bFRlbElucHV0KCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnRsVGVsSW5wdXQ7XG4gICAgfVxuXG4gICAgZ2V0IHBob25lTnVtYmVyKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9waG9uZU51bWJlcjtcbiAgICB9XG5cbiAgICBzZXQgcGhvbmVOdW1iZXIodmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAoISF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5faW50bFRlbElucHV0LnNldE51bWJlcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGhvbmVOdW1iZXIgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5pMThuaXplUGhvbmVOdW1iZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaTE4bml6ZVBob25lTnVtYmVyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLkUxNjRQaG9uZU51bWJlciA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLl9pbnRsVGVsSW5wdXQuaXNWYWxpZE51bWJlcigpKSB7XG4gICAgICAgICAgICB0aGlzLkUxNjRQaG9uZU51bWJlciA9IHRoaXMuX2ludGxUZWxJbnB1dC5nZXROdW1iZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLkUxNjRQaG9uZU51bWJlckNoYW5nZS5lbWl0KHRoaXMuRTE2NFBob25lTnVtYmVyKTtcbiAgICB9XG59XG4iXX0=