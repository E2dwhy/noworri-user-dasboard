{"version":3,"file":"intl-tel-input-ng.umd.js","sources":["../../src/lib/components/intl-tel-input.component.ts","../../src/lib/intl-tel-input-ng.module.ts","../../src/public_api.ts","../../src/intl-tel-input-ng.ts"],"sourcesContent":["/*\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { AfterViewInit, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ControlContainer, NgForm } from '@angular/forms';\nimport * as intlTelInput from 'intl-tel-input';\nimport { CountryData, IntlTelInputOptions } from '../model/intl-tel-input-options';\n\n@Component({\n    selector: 'intl-tel-input',\n    templateUrl: './intl-tel-input.component.html',\n    styleUrls: ['./intl-tel-input.component.scss'],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n})\nexport class IntlTelInputComponent implements AfterViewInit {\n\n    @Input() public cssClass!: string;\n    @Input() public E164PhoneNumber!: string | null;\n    @Input() public label!: string;\n    @Input() public labelCssClass!: string;\n    @Input() public name = 'intl-tel-input-name';\n    @Input() public onlyLocalized!: boolean;\n    @Input() public options: IntlTelInputOptions = {};\n    @Input() public required!: boolean;\n    @Output() private E164PhoneNumberChange = new EventEmitter<string | null>();\n    @ViewChild('intlTelInput') private _inputElement!: ElementRef;\n    private _phoneNumber!: string;\n    private _intlTelInput: any;\n\n    private static modifyCountryData(): void {\n        (window as any).intlTelInputGlobals.getCountryData().forEach((country: CountryData) =>\n            country.name = country.name.replace(/.+\\((.+)\\)/, '$1'));\n    }\n\n    public ngAfterViewInit(): void {\n        if (this.onlyLocalized) {\n            IntlTelInputComponent.modifyCountryData();\n        }\n\n        const intlTelInputInstance = intlTelInput;\n        this._intlTelInput = intlTelInputInstance(this._inputElement.nativeElement, this.options);\n    }\n\n    get intlTelInput(): any {\n        return this._intlTelInput;\n    }\n\n    get phoneNumber(): string {\n        return this._phoneNumber;\n    }\n\n    set phoneNumber(value: string) {\n        if (!!value) {\n            this._intlTelInput.setNumber(value);\n        }\n        this._phoneNumber = value;\n        this.i18nizePhoneNumber();\n    }\n\n    public i18nizePhoneNumber(): void {\n        this.E164PhoneNumber = null;\n        if (this._intlTelInput.isValidNumber()) {\n            this.E164PhoneNumber = this._intlTelInput.getNumber();\n        }\n        this.E164PhoneNumberChange.emit(this.E164PhoneNumber);\n    }\n}\n","/*\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IntlTelInputComponent } from './components/intl-tel-input.component';\n\n@NgModule({\n    declarations: [\n        IntlTelInputComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n    ],\n    exports: [\n        IntlTelInputComponent,\n    ]\n})\nexport class IntlTelInputNgModule {\n    public static forRoot(): ModuleWithProviders<IntlTelInputNgModule> {\n        return {\n            ngModule: IntlTelInputNgModule,\n            providers: []\n        };\n    }\n}\n","/*\n * Public API Surface of intl-tel-input-ng\n */\n\nexport * from './lib/components/intl-tel-input.component';\nexport * from './lib/model/intl-tel-input-options';\nexport * from './lib/intl-tel-input-ng.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["EventEmitter","Component","ControlContainer","NgForm","Input","Output","ViewChild","NgModule","CommonModule","FormsModule"],"mappings":";;;;;;IAAA;;;;;;;;;QAcA;YAYoB,SAAI,GAAG,qBAAqB,CAAC;YAE7B,YAAO,GAAwB,EAAE,CAAC;YAEhC,0BAAqB,GAAG,IAAIA,iBAAY,EAAiB,CAAC;SA0C/E;QArCkB,uCAAiB,GAAxB;YACH,MAAc,CAAC,mBAAmB,CAAC,cAAc,EAAE,CAAC,OAAO,CAAC,UAAC,OAAoB,IAC9E,OAAA,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,GAAA,CAAC,CAAC;SAChE;QAEM,+CAAe,GAAf;YACH,IAAI,IAAI,CAAC,aAAa,EAAE;gBACpB,qBAAqB,CAAC,iBAAiB,EAAE,CAAC;aAC7C;YAED,IAAM,oBAAoB,GAAG,YAAY,CAAC;YAC1C,IAAI,CAAC,aAAa,GAAG,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SAC7F;QAED,sBAAI,+CAAY;iBAAhB;gBACI,OAAO,IAAI,CAAC,aAAa,CAAC;aAC7B;;;WAAA;QAED,sBAAI,8CAAW;iBAAf;gBACI,OAAO,IAAI,CAAC,YAAY,CAAC;aAC5B;iBAED,UAAgB,KAAa;gBACzB,IAAI,CAAC,CAAC,KAAK,EAAE;oBACT,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;iBACvC;gBACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7B;;;WARA;QAUM,kDAAkB,GAAlB;YACH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,EAAE;gBACpC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;aACzD;YACD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SACzD;;;;gBAzDJC,cAAS,SAAC;oBACP,QAAQ,EAAE,gBAAgB;oBAC1B,8ZAA8C;oBAE9C,aAAa,EAAE,CAAC,EAAE,OAAO,EAAEC,sBAAgB,EAAE,WAAW,EAAEC,YAAM,EAAE,CAAC;;iBACtE;;;2BAGIC,UAAK;kCACLA,UAAK;wBACLA,UAAK;gCACLA,UAAK;uBACLA,UAAK;gCACLA,UAAK;0BACLA,UAAK;2BACLA,UAAK;wCACLC,WAAM;gCACNC,cAAS,SAAC,cAAc;;;IC/B7B;;;;;;;;;QA0BA;;QACkB,4BAAO,GAAd;YACH,OAAO;gBACH,QAAQ,EAAE,oBAAoB;gBAC9B,SAAS,EAAE,EAAE;aAChB,CAAC;SACL;;;;gBAlBJC,aAAQ,SAAC;oBACN,YAAY,EAAE;wBACV,qBAAqB;qBACxB;oBACD,OAAO,EAAE;wBACLC,mBAAY;wBACZC,iBAAW;qBACd;oBACD,OAAO,EAAE;wBACL,qBAAqB;qBACxB;iBACJ;;;ICzBD;;;;ICAA;;;;;;;;;;;;;;;"}